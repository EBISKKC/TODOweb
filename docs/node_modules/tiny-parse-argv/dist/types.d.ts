type Options = {
    boolean?: string[];
    integer?: string[];
    number?: string[];
    string?: string[];
    eager?: string[];
    required?: string[];
    unary?: string[];
    variadic?: string[];
    alias?: Partial<Record<string, string[]>>;
    default?: Partial<Record<string, any>>;
    incompatible?: Partial<Record<string, string[]>>;
    validators?: Partial<Record<string, (value: string) => boolean>>;
    onIncompatible?: (flags: [string, string][]) => void;
    onInvalid?: (flags: string[]) => void;
    onMissing?: (flags: string[]) => void;
    onUnknown?: (flags: string[]) => void;
};
type ParsedArgs = {
    [arg: string]: any;
    '_': string[];
    '--': string[];
};
export type { Options, ParsedArgs };
