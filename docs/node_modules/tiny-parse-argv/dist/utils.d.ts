declare const castArray: <T>(value: T | T[]) => T[];
declare const isBoolean: (value: unknown) => value is true | false;
declare const isNil: (value: unknown) => value is null | undefined;
declare const isNull: (value: unknown) => value is null;
declare const isOverridable: (value: unknown) => value is true | false | null | undefined | "";
declare const isUndefined: (value: unknown) => value is undefined;
declare const setNormal: (target: any, key: string, value: any, override: boolean) => void;
declare const setVariadic: (target: any, key: string, value: any, override: boolean) => void;
declare const uniq: <T>(values: T[]) => T[];
declare const uniqBy: <T>(values: T[], iterator: (value: T, index: number, arr: ArrayLike<T>) => unknown) => T[];
declare const without: <T>(values: T[], value: T) => T[];
declare const zip: <T extends string, U>(keys: T[] | Set<T>, value: U) => Record<T, U>;
export { castArray, isBoolean, isNil, isNull, isOverridable, isUndefined, setNormal, setVariadic, uniq, uniqBy, without, zip };
