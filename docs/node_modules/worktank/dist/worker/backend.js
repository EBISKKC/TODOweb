/* IMPORT */
/* MAIN */
globalThis['WorkTankWorkerBackend'] = new class {
    /* CONSTRUCTOR */
    constructor() {
        /* VARIABLES */
        this.methods = {};
        addEventListener('message', this.message.bind(this));
    }
    /* API */
    exec(method, args) {
        const fn = this.methods[method];
        const result = new Promise(resolve => resolve(fn.apply(undefined, args)));
        const onSuccess = (value) => {
            try {
                postMessage({ type: 'result', value });
            }
            catch (error) {
                onError(error);
            }
        };
        const onError = (error) => {
            error = (error instanceof Error) ? error : (typeof error === 'string' ? new Error(error) : new Error());
            const { message, name, stack } = error;
            postMessage({ type: 'result', error: { message, name, stack } });
        };
        result.then(onSuccess, onError);
    }
    message(message) {
        if (message.data.type === 'exec') {
            return this.exec(message.data.method, message.data.args);
        }
    }
    ready() {
        postMessage({ type: 'ready' });
    }
    register(method, fn) {
        this.methods[method] = fn;
    }
};
/* PLACEHOLDERS */
globalThis.process || (globalThis.process = {});
globalThis.process.env = {
    ...globalThis.process.env,
    ...globalThis.process.ENV_PLACEHOLDER
};
export {};
/*! METHODS_PLACEHOLDER !*/
