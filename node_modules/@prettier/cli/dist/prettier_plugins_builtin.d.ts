declare const plugins: {
    options: {
        singleQuote: {
            category: string;
            type: string;
            default: boolean;
            description: string;
        };
        bracketSpacing: {
            category: string;
            type: string;
            default: boolean;
            description: string;
            oppositeDescription: string;
        };
        bracketSameLine: {
            category: string;
            type: string;
            default: boolean;
            description: string;
        };
        htmlWhitespaceSensitivity: {
            category: string;
            type: string;
            default: string;
            description: string;
            choices: {
                value: string;
                description: string;
            }[];
        };
        singleAttributePerLine: {
            category: string;
            type: string;
            default: boolean;
            description: string;
        };
        vueIndentScriptAndStyle: {
            category: string;
            type: string;
            default: boolean;
            description: string;
        };
        arrowParens: {
            category: string;
            type: string;
            default: string;
            description: string;
            choices: {
                value: string;
                description: string;
            }[];
        };
        jsxBracketSameLine: {
            category: string;
            type: string;
            description: string;
            deprecated: string;
        };
        semi: {
            category: string;
            type: string;
            default: boolean;
            description: string;
            oppositeDescription: string;
        };
        experimentalTernaries: {
            category: string;
            type: string;
            default: boolean;
            description: string;
            oppositeDescription: string;
        };
        jsxSingleQuote: {
            category: string;
            type: string;
            default: boolean;
            description: string;
        };
        quoteProps: {
            category: string;
            type: string;
            default: string;
            description: string;
            choices: {
                value: string;
                description: string;
            }[];
        };
        trailingComma: {
            category: string;
            type: string;
            default: string;
            description: string;
            choices: {
                value: string;
                description: string;
            }[];
        };
        proseWrap: {
            category: string;
            type: string;
            default: string;
            description: string;
            choices: {
                value: string;
                description: string;
            }[];
        };
    };
    languages: ({
        linguistLanguageId: number;
        name: string;
        type: string;
        tmScope: string;
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        color: string;
        extensions: string[];
        parsers: string[];
        vscodeLanguageIds: string[];
        group?: undefined;
        aliases?: undefined;
        filenames?: undefined;
        interpreters?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        tmScope: string;
        group: string;
        extensions: string[];
        aceMode: string;
        parsers: string[];
        vscodeLanguageIds: string[];
        codemirrorMode?: undefined;
        codemirrorMimeType?: undefined;
        aliases?: undefined;
        filenames?: undefined;
        interpreters?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        aliases: string[];
        extensions: string[];
        tmScope: string;
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        parsers: string[];
        vscodeLanguageIds: string[];
        group?: undefined;
        filenames?: undefined;
        interpreters?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        extensions: string[];
        tmScope: string;
        aceMode: string;
        parsers: string[];
        vscodeLanguageIds: string[];
        codemirrorMode?: undefined;
        codemirrorMimeType?: undefined;
        group?: undefined;
        aliases?: undefined;
        filenames?: undefined;
        interpreters?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        aliases: string[];
        extensions: string[];
        tmScope: string;
        aceMode: string;
        parsers: string[];
        vscodeLanguageIds: string[];
        codemirrorMode?: undefined;
        codemirrorMimeType?: undefined;
        group?: undefined;
        filenames?: undefined;
        interpreters?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        tmScope: string;
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        color: string;
        aliases: string[];
        extensions: string[];
        filenames: string[];
        interpreters: string[];
        parsers: string[];
        vscodeLanguageIds: string[];
        group?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        tmScope: string;
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        color: undefined;
        aliases: undefined;
        extensions: string[];
        filenames: undefined;
        interpreters: undefined;
        parsers: string[];
        vscodeLanguageIds: string[];
        group: string;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        aliases: string[];
        interpreters: string[];
        extensions: string[];
        tmScope: string;
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        parsers: string[];
        vscodeLanguageIds: string[];
        group?: undefined;
        filenames?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        group: string;
        extensions: string[];
        tmScope: string;
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        parsers: string[];
        vscodeLanguageIds: string[];
        aliases?: undefined;
        filenames?: undefined;
        interpreters?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        tmScope: string;
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        aliases: string[];
        extensions: string[];
        filenames: string[];
        parsers: string[];
        vscodeLanguageIds: string[];
        group?: undefined;
        interpreters?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        group: string;
        tmScope: string;
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        aliases: string[];
        extensions: string[];
        filenames: never[];
        parsers: string[];
        vscodeLanguageIds: string[];
        interpreters?: undefined;
        wrap?: undefined;
    } | {
        linguistLanguageId: number;
        name: string;
        type: string;
        color: string;
        aliases: string[];
        aceMode: string;
        codemirrorMode: string;
        codemirrorMimeType: string;
        wrap: boolean;
        extensions: string[];
        filenames: string[];
        tmScope: string;
        parsers: string[];
        vscodeLanguageIds: string[];
        group?: undefined;
        interpreters?: undefined;
    })[];
    parsers: any;
    printers: any;
};
export default plugins;
