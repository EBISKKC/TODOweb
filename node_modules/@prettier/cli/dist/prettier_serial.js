import { readFile, writeFile } from "atomically";
import process from "node:process";
import prettier from "prettier/standalone";
import { getPlugins, getPluginsBuiltin, resolve } from "./utils.js";
async function check(filePath, fileContent, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions) {
    const fileContentFormatted = await format(filePath, fileContent, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions);
    return fileContent === fileContentFormatted;
}
async function checkWithPath(filePath, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions) {
    const fileContent = await readFile(filePath, "utf8");
    return check(filePath, fileContent, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions);
}
async function format(filePath, fileContent, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions) {
    formatOptions = await resolve(formatOptions);
    const pluginsBuiltin = await getPluginsBuiltin();
    const plugins = await getPlugins(formatOptions.plugins || []);
    const pluginsOverride = contextOptions.configPrecedence !== 'file-override';
    const options = {
        ...pluginsDefaultOptions,
        ...(pluginsOverride ? formatOptions : pluginsCustomOptions),
        ...(pluginsOverride ? pluginsCustomOptions : formatOptions),
        ...contextOptions,
        filepath: filePath,
        plugins: [
            ...pluginsBuiltin,
            ...plugins,
        ],
    };
    const result = await prettier.formatWithCursor(fileContent, options); //FIXME: Prettier's own types are incorrect here
    if (result.cursorOffset >= 0) {
        process.stderr.write(`${result.cursorOffset}\n`); //TODO: This should be implemented differently, pretty ugly doing it like this
    }
    return result.formatted;
}
async function formatWithPath(filePath, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions) {
    const fileContent = await readFile(filePath, "utf8");
    return format(filePath, fileContent, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions);
}
async function write(filePath, fileContent, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions) {
    const fileContentFormatted = await format(filePath, fileContent, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions);
    if (fileContent === fileContentFormatted)
        return true;
    await writeFile(filePath, fileContentFormatted, "utf8");
    return false;
}
async function writeWithPath(filePath, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions) {
    const fileContent = await readFile(filePath, "utf8");
    return write(filePath, fileContent, formatOptions, contextOptions, pluginsDefaultOptions, pluginsCustomOptions);
}
export { check, checkWithPath, format, formatWithPath, write, writeWithPath };
