/* MAIN */
const castArray = (value) => {
    return Array.isArray(value) ? value : [value];
};
const isBoolean = (value) => {
    return value === true || value === false;
};
const isNil = (value) => {
    return value === null || value === undefined;
};
const isNull = (value) => {
    return value === null;
};
const isOverridable = (value) => {
    return isNil(value) || isBoolean(value) || value === '';
};
const isUndefined = (value) => {
    return value === undefined;
};
const setNormal = (target, key, value, override) => {
    if (override) {
        target[key] = value;
    }
    else if (Array.isArray(target[key])) {
        target[key].push(value);
    }
    else if (isOverridable(target[key])) {
        target[key] = value;
    }
    else {
        target[key] = [target[key], value];
    }
};
const setVariadic = (target, key, value, override) => {
    const values = castArray(value);
    if (override) {
        target[key] = values;
    }
    else if (Array.isArray(target[key])) {
        target[key].push(...values);
    }
    else if (isOverridable(target[key])) {
        target[key] = values;
    }
    else {
        target[key] = [target[key], ...values];
    }
};
const uniq = (values) => {
    return Array.from(new Set(values));
};
const uniqBy = (values, iterator) => {
    const ids = new Set();
    return values.filter((value, index, arr) => {
        const id = iterator(value, index, arr);
        if (ids.has(id))
            return false;
        ids.add(id);
        return true;
    });
};
const without = (values, value) => {
    return values.filter(other => other !== value);
};
const zip = (keys, value) => {
    return Object.fromEntries(Array.from(keys).map(key => [key, value]));
};
/* EXPORT */
export { castArray, isBoolean, isNil, isNull, isOverridable, isUndefined, setNormal, setVariadic, uniq, uniqBy, without, zip };
